---
- name: Check that we have all of the variables that we need
  fail:
    msg: "Required variable {{ item }} has not been set"
  when: vars[item] is undefined
  loop:
    - api_key
    - api_url

- name: Install pre-requisite software
  package: 
    name: unzip
    state: present
  when: install_prerequisites | bool
  become: true

- name: initial Orca API call
  uri:
    url: https://{{ api_url }}
    method: GET
    headers:
      Content-Type: "application/json"
      Authorization: "Token {{ api_key }}"
    return_content: true
    status_code: 200
    body_format: json
  register: result_from_threatoptix_download_api_call

- name: Create {{ destination_directory }} directory
  file:
    path: '{{ destination_directory }}'
    state: directory
    mode: '0755'
  become: true

- name: Create config directory
  file:
    path: //etc/threatoptix
    state: directory
    mode: '0755'
  become: true

- name: Download {{agent_name }} to {{ destination_directory }}
  uri:
    url: '{{result_from_threatoptix_download_api_call.json["s3_signed_url"]}}'
    #user: ec2-user
    method: GET
    dest: '{{ destination_directory }}'
  register: result
  become: true

- name: Extract installation files
  unarchive:
    src: '{{ result.path }}'
    dest: '{{ destination_directory }}'
    remote_src: yes
  become: true

- name: Change ownership of extracted files
  file:
    path: '{{ item }}'
    mode: '0755'
  become: true
  loop:
    - '{{ destination_directory }}/install.sh'
    - '{{ destination_directory }}/uninstall.sh'
    - '{{ destination_directory }}/bin/threatoptix-monitor'

- name: Write config file
  ansible.builtin.template:
    src: templates/threatoptix-monitor.conf.yaml.j2
    dest: /etc/threatoptix/threatoptix-monitor.conf.yaml
  become: true

- name: Write systemd service file
  ansible.builtin.template:
    src: templates/threatoptix-monitor.service.j2
    dest: /etc/systemd/system/threatoptix-monitor.service
  become: true

- name: Start {{ agent_name }} service
  systemd:
    name: threatoptix-monitor
    state: started

- name: Collect facts about system services
  service_facts:
  register: services_state

- name: Fail if {{ agent_name }} is not running
  fail:
    msg: "{{ agent_name }} is not running"
  when: services_state.ansible_facts.services['threatoptix-monitor.service'].state != "running"

- name: Debug
  debug:
    msg: The {{ agent_name }} is running
  when: services_state.ansible_facts.services['threatoptix-monitor.service'].state == "running"

